[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  let g:unite_enable_start_insert = 1
  let g:unite_source_history_yank_enable = 1
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_cmd = 'VimFiler'
hook_add = '''
  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_tree_leaf_icon = ' '
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_file_icon = '-'
  let g:vimfiler_marked_file_icon = '*'
  nnoremap <silent> <leader>bo :<C-u>VimFilerExplorer<CR>
  let g:vimfiler_ignore_pattern = ['^\.', '\%(\.pyc\|__pycache__\)$']
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = ['<Plug>(incsearch-']
hook_add = '''
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
'''

[[plugins]]
repo = 'tpope/vim-repeat'
on_map = '.'

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_map = ['gJ', 'gS']

[[plugins]]
repo = 'mattn/emmet-vim'
on_map = [['in', '<C-y>,']]

[[plugins]]
repo = 'tyru/caw.vim'
on_map = 'gc'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)nnoremap q? <NOP>
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = '<Plug>(textobj-entire-'
hook_add = '''
  omap ae <Plug>(textobj-entire-a)
  omap ie <Plug>(textobj-entire-i)
  xmap ae <Plug>(textobj-entire-a)
  xmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = 'vim-textobj-user'
on_map = '<Plug>(textobj-indent-'
hook_add = '''
  omap ai <Plug>(textobj-indent-a)
  omap ii <Plug>(textobj-indent-i)
  xmap ai <Plug>(textobj-indent-a)
  xmap ii <Plug>(textobj-indent-i)
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
on_map = '<Plug>(operator-replace)'
hook_add = '''
  nmap s <Plug>(operator-replace)
'''
depends = 'vim-operator-user'

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
on_map = '<Plug>(textobj-multiblock-'
hook_add = '''
  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  xmap ab <Plug>(textobj-multiblock-a)
  xmap ib <Plug>(textobj-multiblock-i)
'''
depends = 'vim-textobj-user'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
rev = 'input_in_advance'
on_map = '<Plug>(textobj-surrount-'
hook_add = '''
  nmap sa <Plug>(operator-surround-append-input-in-advance)
  nmap sd <Plug>(operator-surround-delete)
  nmap sr <Plug>(operator-surround-replace)
  nmap s( <Plug>(operator-surround-append-input-in-advance)(
  nmap s{ <Plug>(operator-surround-append-input-in-advance){
  nmap s[ <Plug>(operator-surround-append-input-in-advance)[
  nmap s" <Plug>(operator-surround-append-input-in-advance)"
  nmap s' <Plug>(operator-surround-append-input-in-advance)'

  " vim-textobj-multiblock
  nmap sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
  nmap srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
'''
depends = ['vim-operator-user', 'vim-textobj-multiblock']

[[plugins]]
repo = 'bps/vim-textobj-python'
depends = 'vim-textobj-user'
on_ft = ['python', 'htmldjango', 'markdown']
on_map = '<Plug>(textobj-python-'
post_hook_source = '''
  xmap aC <Plug>(textobj-python-class-a)
  omap aC <Plug>(textobj-python-class-a)
  xmap iC <Plug>(textobj-python-class-i)
  omap iC <Plug>(textobj-python-class-i)
  xmap aF <Plug>(textobj-python-function-a)
  omap aF <Plug>(textobj-python-function-a)
  xmap iF <Plug>(textobj-python-function-i)
  omap iF <Plug>(textobj-python-function-i)
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
on_i = 1
hook_source = '''
  autocmd BufNewFile,BufRead *.md set filetype=markdown
'''
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
# repo = 'kannokanno/previm'
repo = 'kazuph/previm'
rev = 'feature/add-plantuml-plugin'
on_ft = ['markdown', 'text', 'rst']
on_cmd = 'PrevimOpen'
hook_add = '''
  let g:previm_enable_realtime = 1
  let g:previm_show_header = 0
'''
depends = 'open-browser.vim'

[[plugins]]
repo = 'tyru/open-browser.vim'

# [[plugins]]
# repo = 'lambdalisue/gina.vim'
# on_cmd = 'Gina'
# hook_add = '''
#   nnoremap <silent> <leader>gs :<C-u> :Gina status<CR>
#   nnoremap <silent> <leader>gc :<C-u> :Gina commit<CR>
#   nnoremap <silent> <leader>gca :<C-u> :Gina commit --amend<CR>
#   nnoremap <silent> <leader>gp :<C-u> :Gina push<CR>
# '''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_post_source = '''
   nnoremap <silent> <leader>gs :<C-u> :Gstatus<CR>
   nnoremap <silent> <leader>gc :<C-u> :Gcommit<CR>
   nnoremap <silent> <leader>gp :<C-u> :Gpush<CR>
'''
on_map = '<leader>gs'

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'vim-scripts/confluencewiki.vim'
on_ft = 'confluencewiki'
hook_source = '''
  autocmd BufNewFile,BufRead *.conflu set filetype=confluencewiki
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python', 'htmldjango']
build = 'pip install jedi'
hook_add = '''
  " quickrunと被るため変更
  let g:jedi#rename_command = '<Leader>R'
  " pydoc を自動で表示しない
  " autocmd FileType python setlocal completeopt-=preview
  " let g:jedi#popup_select_first = 0
  " let g:jedi#auto_vim_configuration = 0
  let g:jedi#completions_enabled = 0
  let g:jedi#smart_auto_mappings = 0
'''

[[plugins]]
repo = 'lambdalisue/vim-django-support'
on_ft = ['python', 'htmldjango']
on_i = 1

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = ['python']
on_i = 1

[[plugins]]
repo = 'hdima/python-syntax'
on_ft = ['python']
hook_add = '''
  let python_highlight_all = 1
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = '''has('nvim')'''
depends = 'context_filetype.vim'
on_i = 1
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#sources#jedi#show_docstring = 1
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
on_i = 1
depends = 'deoplete.nvim'

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = 'javascript'
on_i = 1
depends = 'deoplete.nvim'

[[plugins]]
repo = 'marijnh/tern_for_vim'
on_ft = 'javascript'
on_i = 1

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = 'python'

[[plugins]]
repo = 'lambdalisue/vim-pyenv'
on_ft = 'python'

[[plugins]]
repo = 'wannesm/wmgraphviz.vim'
on_ft = ['dot', 'plantuml', 'markdown']

[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['plantuml', 'markdown']

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_cmd = 'Junkfile'
hook_add = '''
  nnoremap <silent> <leader>jo :<C-u> :JunkfileOpen<CR>
  nnoremap <silent> <leader>jd :<C-u> :JunkfileDiary<CR>
'''
hook_post_source = '''
  command! -nargs=0 JunkfileDiary call junkfile#open_immediately(strftime('%Y-%m-%d.md'))
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1
hook_post_source = '''
  " Plugin key-mappings.
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB>
   \ pumvisible() ? "\<C-n>" :
   \ neosnippet#expandable_or_jumpable() ?
   \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " Enable snipMate compatibility feature.
  let g:neosnippet#enable_snipmate_compatibility = 1

  " Tell Neosnippet about the other snippets
  let g:neosnippet#snippets_directory = [ '~/.vim-snippets', g:vim_home . '/snippets' ]
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = 'neosnippet'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'
on_source = 'quickrun'

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = 'zsh'
on_i = 1

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = 'dockerfile'

[[plugins]]
repo = 'vim-scripts/dbext.vim'
on_map = '<leader>s'
hook_source = '''
  autocmd BufNewFile,BufRead Result set filetype=dbext
'''
hook_add = '''
  let g:dbext_default_buffer_lines = 20
  let g:dbext_default_history_file = '~/.dbext_sql_history'
'''

[[plugins]]
repo = 'vim-scripts/sql_iabbr.vim'
on_ft = 'sql'

[[plugins]]
repo = 'gorodinskiy/vim-coloresque'
on_ft = ['css', 'html', 'less', 'sass', 'scss', 'styles', 'vim']

[[plugins]]
repo = 'basyura/twibill.vim'

[[plugins]]
repo = 'basyura/TweetVim'
on_cmd = 'TweetVim'
depends = 'twibill.vim'
hook_add = '''
  nnoremap <leader>tws :<C-u>TweetVimSwitch<Space>
  nnoremap <silent> <leader>twu :<C-u>TweetVimSay<CR>
'''

[[plugins]]
repo = 'rking/ag.vim'
on_cmd = 'Ag'

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = 'Tagbar'
hook_add = '''
  nnoremap <silent> <leader>to :<C-u>TagbarOpen<CR>
  nnoremap <silent> <leader>tc :<C-u>TagbarClose<CR>
'''

[[plugins]]
repo = 'heavenshell/vim-pydocstring'
hook_add = '''
  let g:pydocstring_enable_mapping = 0
  nmap <silent> <C-m> <Plug>(pydocstring)
'''
on_ft = 'python'

[[plugins]]
repo = 'lambdalisue/vim-gista'
hook_add = '''
  let g:gista#client#default_username = 'coffexpr'
'''
on_cmd = 'Gista'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'junegunn/fzf'
marged = 0
build = '''
  ./install --bin
'''
on_event = 'VimEnter'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_post_source = '''
  source ~/.vim/rc/fzf.vim
'''
on_source = 'fzf'

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_post_source = '''
  colorscheme hybrid
'''
on_event = 'VimEnter'

[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = 'yaml'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_map = '-'
hook_add = '''
  let g:switch_mapping = "-"
'''

# [[plugins]]
# repo = 'jeffkreeftmeijer/vim-numbertoggle'
# on_path = '.*'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_cmd = 'help'

[[plugins]]
repo = 'w0rp/ale'
on_path = '.*'

[[plugins]]
repo = 'jceb/vim-orgmode'
on_ft = 'org'
