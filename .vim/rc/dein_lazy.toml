[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_cmd = 'VimFiler'
hook_source = '''
  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_tree_leaf_icon = ' '
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_file_icon = '-'
  let g:vimfiler_marked_file_icon = '*'
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_path = '.*'
hook_add = '''
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
'''

[[plugins]]
repo = 'tpope/vim-repeat'
on_path = '.*'

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_i = 1

[[plugins]]
repo = 'mattn/emmet-vim'
on_i = 1

[[plugins]]
repo = 'tyru/caw.vim'
on_path = '.*'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_path = '.*'
hook_add = '''
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)nnoremap q? <NOP>
'''

[[plugins]]
repo = 'kana/vim-textobj-entire'
on_path = '.*'

[[plugins]]
repo = 'kana/vim-textobj-indent'
on_path = '.*'

[[plugins]]
repo = 'kana/vim-operator-replace'
on_path = '.*'
hook_source = '''
  nmap s <Plug>(operator-replace)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
on_path = '.*'
hook_source = '''
  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  xmap ab <Plug>(textobj-multiblock-a)
  xmap ib <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
rev = 'input_in_advance'
on_path = '.*'
hook_source = '''
  nmap sa <Plug>(operator-surround-append-input-in-advance)
  nmap sd <Plug>(operator-surround-delete)
  nmap sr <Plug>(operator-surround-replace)
  nmap s( <Plug>(operator-surround-append-input-in-advance)(
  nmap s{ <Plug>(operator-surround-append-input-in-advance){
  nmap s[ <Plug>(operator-surround-append-input-in-advance)[
  nmap s" <Plug>(operator-surround-append-input-in-advance)"
  nmap s' <Plug>(operator-surround-append-input-in-advance)'

  " vim-textobj-multiblock
  nmap sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
  nmap srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
'''

[[plugins]]
repo = 'bps/vim-textobj-python'
on_ft = ['python', 'htmldjango', 'markdown']
hook_post_update = '''
  call textobj#user#map('python', {
      \   'class': {
      \     'select-a': '<buffer>ac',
      \     'select-i': '<buffer>ic',
      \   },
      \   'function': {
      \     'select-a': '<buffer>af',
      \     'select-i': '<buffer>if',
      \   }
      \ })
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_source = '''
  let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
# repo = 'kannokanno/previm'
repo = 'kazuph/previm'
rev = 'feature/add-plantuml-plugin'
on_ft = ['markdown', 'text', 'rst']
hook_source = '''
  let g:previm_enable_realtime = 1
	let g:previm_show_header = 0
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_path = '.*'

[[plugins]]
# repo = 'airblade/vim-gitgutter'
repo = 'sgur/vim-lazygutter'
on_path = '.*'

[[plugins]]
repo = 'tpope/vim-fugitive'
on_path = '.*'

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1
hook_post_source = '''
  source ~/.vim/rc/lexima.vim
'''

[[plugins]]
repo = 'tpope/vim-abolish'
on_path = '.*'

[[plugins]]
repo = 'vim-scripts/confluencewiki.vim'
on_ft = 'confluencewiki'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python', 'htmldjango', 'markdown']
hook_post_update = '''
  let cmd = 'pip install jedi'
  let g:dein#plugin.build = cmd
'''
hook_source = '''
  " quickrunと被るため大文字に変更
  let g:jedi#rename_command = '<Leader>R'
  " pydoc を自動で表示しない
  autocmd FileType python setlocal completeopt-=preview
  let g:jedi#popup_select_first = 0
'''

[[plugins]]
repo = 'lambdalisue/vim-django-support'
on_ft = ['python', 'htmldjango']

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = ['python', 'htmldjango']

[[plugins]]
repo = 'hdima/python-syntax'
on_ft = ['python', 'htmldjango']
hook_source = '''
  let python_highlight_all = 1
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = '''has('nvim')'''
depends = 'context_filetype.vim'
on_i = 1
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#sources#jedi#show_docstring = 1

    " <TAB>: completion.
    imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
'''

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = 'javascript'

[[plugins]]
repo = 'marijnh/tern_for_vim'
on_ft = 'javascript'

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'

[[plugins]]
repo = 'lambdalisue/vim-pyenv'

[[plugins]]
repo = 'wannesm/wmgraphviz.vim'
on_ft = ['dot', 'plantuml', 'markdown']

[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['plantuml', 'markdown']

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_cmd = 'Junkfile'
hook_source = '''
  command! -nargs=0 JunkfileDiary call junkfile#open_immediately(strftime('%Y-%m-%d.md'))
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml', 'markdown']

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_path = '.*'
hook_source = '''
  let g:precious_enable_switch_CursorMoved = {
  \   "*" : 0
  \}
  let g:precious_enable_switch_CursorMoved_i = {
  \    "help" : 0
  \}
  let g:precious_enable_switchers = {
  \  "*" : {
  \    "setfiletype" : 1
  \  },
  \  "markdown" : {
  \    "setfiletype" : 0
  \  },
  \}
  let g:context_filetype#search_offset = 300
  augroup preciousSyntaxSwitch
    autocmd!
    autocmd User PreciousFileType let &l:syntax = precious#context_filetype()
  augroup END
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_source = 'vim-precious'

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1
hook_source = '''
  source ~/.vim/rc/neosnippet.vim
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = 'neosnippet'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'
on_path = '.*'

[[plugins]]
repo = 'vim-syntastic/syntastic'
hook_add = '''
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
'''
on_path = '.*'

[[plugins]]
repo = 'dannyob/quickfixstatus'
on_path = '.*'

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = 'zsh'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = ['dockerfile', 'markdown']

[[plugins]]
repo = 'vim-scripts/dbext.vim'
on_path = '.*'
hook_source = '''
  let g:dbext_default_buffer_lines = 20
  let g:dbext_default_history_file = '~/.dbext_sql_history'
'''

[[plugins]]
repo = 'gorodinskiy/vim-coloresque'
on_ft = ['css', 'html', 'less', 'sass', 'scss', 'styles', 'vim']

[[plugins]]
repo = 'basyura/twibill.vim'

[[plugins]]
repo = 'basyura/TweetVim'
on_cmd = 'TweetVim'
depends = 'twibill.vim'

[[plugins]]
repo = 'rking/ag.vim'
on_cmd = 'Ag'

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = 'Tagbar'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_source = '''
  let g:better_whitespace_filetypes_blacklist=['quickrun', 'dbext', 'tweetvim', 'vimfiler', 'diff', 'gitcommit', 'unite', 'qf', 'help']
'''
on_path = '.*'

[[plugins]]
repo = 'heavenshell/vim-pydocstring'
hook_add = '''
  let g:pydocstring_enable_mapping = 0
  nmap <silent> <C-m> <Plug>(pydocstring)
'''
on_ft = 'python'

[[plugins]]
repo = 'lambdalisue/vim-gista'
hook_add = '''
  let g:gista#client#default_username = 'coffexpr'
'''
on_cmd = 'Gista'
