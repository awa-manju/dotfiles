#!/usr/bin/env python3

import re
from collections import defaultdict
from datetime import datetime
from typing import NamedTuple

KIRO = 1024
MEGA = KIRO*1024
GIGA = MEGA*1024

VERTICAL_VAR = '｜'


class AppIcon(NamedTuple):
    preifx: str
    icon: str


APP_ICON = (
    AppIcon('Google Chrome', '󿞮'),
    AppIcon('com.docker', ''),
    AppIcon('Rocket.Chat', '󿚄'),
    AppIcon('node', ''),
    AppIcon('Slack', '󿦰'),
)


def to_icon(text: str):
    for icon in APP_ICON:
        if text.startswith(icon.preifx):
            return icon.icon
    return text


with open('/tmp/top.log', 'rb') as f:
    f.seek(-200000, 2)
    i = f.tell()
    for line in f:
        if line.startswith(b'Process'):
            f.seek(i)
            break
        i = f.tell()
    out = f.read().decode()
out = out.split('\n')


# Process count

process_count_re = (
    r'Processes: '
    r'(?P<total>\d+) total, '
    r'(?P<running>\d+) running, '
    r'(?P<sleeping>\d+) sleeping, '
    r'(?P<threads>\d+) threads'
)
pc = re.search(process_count_re, out[1])


# Load average

load_average_re = r'Load Avg: (?P<l1>[^,]+), (?P<l5>[^,]+), (?P<l15>[^,]+) '
la = re.search(load_average_re, out[2])


# table

header = out[11]
offsets = [0]
for i, _ in enumerate(header):
    if i == 0:
        continue
    if header[i] != ' ' and header[i-1] == ' ':
        offsets.append(i)
table = []
for l in out[12:]:
    line = l
    row = []
    for i, _ in enumerate(offsets):
        if i == 0:
            continue
        row.append(line[offsets[i-1]: offsets[i]].strip())
    table.append(row)


# normalize mem usage
for row in table:
    mem = row[7]
    if not mem:
        row[7] = 0
        continue
    mem = mem.replace('+', '').replace('-', '')
    if mem[-1] == 'M':
        mem = int(mem[:-1]) * MEGA
    elif mem[-1] == 'K':
        mem = int(mem[:-1]) * KIRO
    elif mem[-1] == 'B':
        mem = int(mem[:-1])
    row[7] = mem


# group by mem usage
mem_by_app = defaultdict(lambda: 0)
for row in table:
    name = ' '.join(row[1].split()[:2])
    mem_by_app[name] += row[7]
mem_by_app = mem_by_app.items()
mem_by_app = sorted(mem_by_app, key=lambda x: x[1], reverse=True)

# max cpu usage app
max_cpu_use = 0
max_cpu_app = None
for row in table:
    if not row[2]:
        continue
    usage = float(row[2])
    if max_cpu_use < usage:
        max_cpu_app = row
        max_cpu_use = usage

print(VERTICAL_VAR, end='')
print(f'{max_cpu_app[1][:5]}:{max_cpu_app[2]}%', end='')

print(VERTICAL_VAR, end='')
for i, (name, mem) in enumerate(mem_by_app[:5]):
    if i > 0:
        print(' ', end='')
    memh = mem
    name = to_icon(name)
    if mem > GIGA:
        memh = f'{mem/GIGA:0.1f}G'
    elif mem > MEGA:
        memh = f'{mem/MEGA:0.0f}M'
    print(f'{name[:5]} {memh}', end='')

print(VERTICAL_VAR, end='')
l1, l5, l15 = (
    float(la.group('l1')),
    float(la.group('l5')),
    float(la.group('l15'))
)
print(f'LA:{l1:.1f} {l5:.1f} {l15:.1f}', end='')

print(VERTICAL_VAR, end='')
print(datetime.now().strftime('%m/%d(%a) %H:%M'), end='')
