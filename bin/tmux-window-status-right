#!/usr/bin/env python3

import re
import subprocess
from collections import defaultdict
from datetime import datetime

KIRO = 1024
MEGA = KIRO*1024
GIGA = MEGA*1024

result = subprocess.run(['top', '-l', '1'], capture_output=True)

if result.returncode != 0:
    raise RuntimeError

out = result.stdout.split(b'\n')


class Parser:
    regex = ()

    @classmethod
    def parse(cls, text):
        res = {}
        for name, r in cls.regex:
            m = re.search(r, text)
            if m:
                res[name] = m.groups()[0]
        return res


class ProcessesParser(Parser):
    regex = (
        ('total', r'(\d+) total'),
        ('running', r'(\d+) running'),
        ('sleeping', r'(\d+) sleeping'),
        ('stuck', r'(\d+) stuck'),
        ('threads', r'(\d+) threads'),
    )


class ProcessCount:
    def __init__(self, total=0, running=0, sleeping=0, stuck=0, threads=0):
        self.total = int(total)
        self.running = int(running)
        self.sleeping = int(sleeping)
        self.stuck = int(stuck)
        self.threads = int(threads)

    @classmethod
    def from_text(cls, text: str):
        return cls(**ProcessesParser.parse(text))


class LoadAvgParser(Parser):
    regex = (
        ('a', r'Load Avg: ([^,]+), '),
        ('b', r'Load Avg: [^,]+, ([^,]+), '),
        ('c', r'Load Avg: [^,]+, [^,]+, ([^,]+) '),
    )


class LoadAvg:
    def __init__(self, *avgs):
        self.avgs = [float(i) for i in avgs]

    @classmethod
    def from_text(cls, text):
        return cls(*LoadAvgParser.parse(text).values())


header = out[11].decode()
offsets = [0]
for i, _ in enumerate(header):
    if i == 0:
        continue
    if header[i] != ' ' and header[i-1] == ' ':
        offsets.append(i)
table = []
for l in out[12:]:
    line = l.decode()
    row = []
    for i, _ in enumerate(offsets):
        if i == 0:
            continue
        row.append(line[offsets[i-1]: offsets[i]].strip())
    table.append(row)


# normalize mem usage
for row in table:
    mem = row[7]
    if not len(mem):
        row[7] = 0
        continue
    mem = mem.replace('+', '')
    if mem[-1] == 'M':
        mem = int(mem[:-1]) * MEGA
    elif mem[-1] == 'K':
        mem = int(mem[:-1]) * KIRO
    row[7] = mem


mem_by_app = defaultdict(lambda: 0)
for row in table:
    name = ' '.join(row[1].split()[:2])
    mem_by_app[name] += row[7]
mem_by_app = mem_by_app.items()
mem_by_app = sorted(mem_by_app, key=lambda x: x[1], reverse=True)

p = ProcessCount.from_text(out[0].decode())
la = LoadAvg.from_text(out[2].decode())

print(' | ', end='')
for name, mem in mem_by_app[:5]:
    memh = mem
    if name == 'Google Chrome':
        name = '󿞮'
    if name.startswith('com.docker'):
        name = ''
    if name.startswith('Rocket.Chat'):
        name = '󿚄'
    if name == 'node':
        name = ''
    if name.startswith('Slack'):
        name = '󿦰'
    if mem > GIGA:
        memh = f'{mem/GIGA:0.1f}G'
    elif mem > MEGA:
        memh = f'{mem/MEGA:0.0f}M'
    print(f'{name} {memh} ', end='')

print(' | ', end='')
load_average = ' '.join(str(i)[:3] for i in la.avgs)
print(f'LA:{load_average}', end='')

print(' | ', end='')
print(datetime.now().strftime('%m/%d(%a) %H:%M'), end='')
