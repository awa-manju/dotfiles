#!/usr/bin/env python3

import re
import subprocess
from argparse import ArgumentParser
from getpass import getuser
from pathlib import Path

MOUNT_ROOT = Path('~/mnt').expanduser()


class MountPoint:
    def __init__(self, server_path):
        """
        server_path: //user@server/path/to/dir
        """
        if not server_path.startswith('//'):
            raise ValueError('Server path starts with: //')

        self.server_path = server_path
        self.mount_root = MOUNT_ROOT

        server_dirs = server_path[2:].split('/')
        if not '@' in server_dirs[0]:
            server_dirs[0] = f'{getuser()}@{server_dirs[0]}'
        self.server_point = Path('//') / '/'.join(server_dirs[:2])
        self.mount_point = MOUNT_ROOT / '/'.join(server_dirs[:2])
        self.local_path = MOUNT_ROOT / '/'.join(server_dirs)

    def is_mounted(self):
        cmd = ['mount']
        res = subprocess.run(cmd, capture_output=True)
        mounts = res.stdout.decode().strip().split('\n')
        m = str(self.mount_point)
        return any(m in i for i in mounts)

    def mount(self):
        if self.is_mounted():
            return
        self.mount_point.mkdir(parents=True, exist_ok=True)
        cmd = [
            'mount',
            '-t',
            'smbfs',
            '-o',
            'rdonly',
            str(self.server_point),
            str(self.mount_point),
        ]
        subprocess.run(cmd)

    def umount(self):
        if not self.is_mounted():
            return
        cmd = ['umount', str(self.mount_point)]
        subprocess.run(cmd)


def main():
    parser = ArgumentParser()
    parser.add_argument('server_path', metavar='server path')
    parser.add_argument('-u', action='store_true')
    args = parser.parse_args()

    server_path = args.server_path
    server_path = re.sub('^smb:', '', server_path)
    if server_path.startswith('\\'):
        server_path = server_path.replace('\\', '/')
    umount = args.u
    mp = MountPoint(server_path)

    if umount:
        mp.umount()
        return

    mp.mount()
    print(mp.local_path)


if __name__ == '__main__':
    main()
